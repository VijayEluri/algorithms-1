import java.util.Arrays;

public class ToastXToast {
  int l;
  int[] undertoasted;
  int[] overtoasted;

  public int bake(int[] _undertoasted, int[] _overtoasted) {
    undertoasted = _undertoasted;
    overtoasted = _overtoasted;

    Arrays.sort( undertoasted );
    Arrays.sort( overtoasted );
    
    int count = 0;
    int[] r = new int[]{-1, -1};
    while ( true ) {
      r = group (r);
      if (r == null)
        return -1;
      count += 1;
      if (r[0] == undertoasted.length)
        return count;
    }
  }

  private int[] group(int[] r) {
    int i = r[0] + 1;
    int j = r[1] + 1;
    
    if ( j == overtoasted.length )
      return null;
    
    while ( i < undertoasted.length ) {
      if ( undertoasted[i] < overtoasted[j] )
        i += 1;
      else 
        break;
    }
    if ( i == undertoasted.length )
      return new int[]{i, 0};
    
    while ( j < overtoasted.length ) { 
      if ( overtoasted[j] < undertoasted[i] )
        j += 1;
      else
        break;
    }
    if ( j == overtoasted.length )
      return null;
    
    return new int[]{i - 1, j - 1};
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p1.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p1[i]);
    }
    System.out.print("}");
    System.out.println("]");
    ToastXToast obj;
    int answer;
    obj = new ToastXToast();
    long startTime = System.currentTimeMillis();
    answer = obj.bake(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p2);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p2;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }
  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    int[] p1;
    int p2;

    // ----- test 0 -----
    p0 = new int[]{2,4};
    p1 = new int[]{5,6,3};
    p2 = 2;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[]{5};
    p1 = new int[]{4};
    p2 = -1;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[]{1,2,3};
    p1 = new int[]{5,6,7};
    p2 = 1;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new int[]{1,3,5};
    p1 = new int[]{2,4,6};
    p2 = 2;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
