package tc.misc.dp;

import java.util.HashMap;
import java.util.Map;

// Topcoder SRM 165, DIV 2, level 3

public class ShortPalindromes {
	Map<String, String> s = new HashMap<String, String>();

	public String shortest(String base) {
		if (s.containsKey(base))
			return s.get(base);
		
		if (isPalindrome(base)) {
			s.put(base, base);
			return base;
		}

		if (base.length() == 2) {
			if (base.charAt(0) < base.charAt(1))
				s.put(base, base + base.substring(0, 1));
			else
				s.put(base, base.substring(1) + base);
			return s.get(base);
		}
	
		String x = base.substring(0, 1);
		String y = base.substring(base.length() - 1);

		if (base.charAt(0) == base.charAt(base.length() - 1)) {
			String p = shortest(base.substring(1, base.length() - 1));
			s.put(base, x + p + x);
			return s.get(base);
		}
		
		String p1 = x + shortest(base.substring(1)) + x;
		String p2 = y + shortest(base.substring(0, base.length() - 1)) + y;

		s.put(base, getPalindrome(p1, p2));
		return s.get(base);
	}

	private boolean isPalindrome(String base) {
		for (int i = 0, j = base.length() - 1; i < j; i++, j--)
			if (base.charAt(i) != base.charAt(j))
				return false;
		return true;
	}

	private String getPalindrome(String p1, String p2) {
		if (p1.length() < p2.length())
			return p1;
		if (p1.length() > p2.length())
			return p2;

		int r = p1.compareTo(p2);
		if (r < 0)
			return p1;
		else 
			return p2;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		ShortPalindromes obj;
		String answer;
		obj = new ShortPalindromes();
		long startTime = System.currentTimeMillis();
		answer = obj.shortest(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String p0;
		String p1;

		// ----- test 0 -----
		p0 = "RACE";
		p1 = "ECARACE";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = "TOPCODER";
		p1 = "REDTOCPCOTDER";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = "Q";
		p1 = "Q";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = "MADAMIMADAM";
		p1 = "MADAMIMADAM";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = "ALRCAGOEUAOEURGCOEUOOIGFA";
		p1 = "AFLRCAGIOEOUAEOCEGRURGECOEAUOEOIGACRLFA";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
