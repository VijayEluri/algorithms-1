package tc.srm207;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

public class CaptureThemAll {
  int[][] knightMoves = {{-2, -1}, {-2, 1}, {2, -1}, {2, 1}, {-1, -2}, {1, -2}, {-1, 2}, {1, 2}};

  public int fastKnight(String knight, String rook, String queen) {
    return Math.min(
        bfs(knight, rook)  + bfs(rook, queen),
        bfs(knight, queen) + bfs(queen, rook));
  }

  private int bfs(String start, String finish) {
    Queue<String> q = new LinkedList<String>();
    Set<String> cache = new HashSet<String>();
    Map<String, Integer> distance = new HashMap<String, Integer>();

    distance.put(start, 0);
    cache.add(start);
    q.offer(start);

    while(!q.isEmpty()) {
      String node = q.poll();
      List<String> nghbrs = neighbors(node);

      for(String nghbr: nghbrs) {
        if (cache.contains(nghbr))
          continue;
        if (nghbr.equals(finish))
          return distance.get(node) + 1;
        distance.put(nghbr, distance.get(node) + 1);
        cache.add(nghbr);
        q.offer(nghbr);
      }
    }
    return -1;
  }

  private List<String> neighbors(String cell) {
    List<String> nextMoves = new ArrayList<String>();
    for (int[] move: knightMoves) {
      char[] rankFile = new char[2];
      rankFile[0] = (char) (cell.charAt(0) + move[0]);
      rankFile[1] = (char) (cell.charAt(1) + move[1]);
      String nextMove = new String(rankFile);
      if (valid(nextMove))
        nextMoves.add(nextMove);
    }
    return nextMoves;
  }

  private boolean valid(String move) {
    if (move.charAt(0) >= 'a' &&
        move.charAt(0) <= 'h' &&
        move.charAt(1) >= '1' &&
        move.charAt(1) <= '8')
      return true;
    return false;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, String p2, boolean hasAnswer, int p3) {
    System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"" + "," + "\"" + p2 + "\"");
    System.out.println("]");
    CaptureThemAll obj;
    int answer;
    obj = new CaptureThemAll();
    long startTime = System.currentTimeMillis();
    answer = obj.fastKnight(p0, p1, p2);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p3);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p3;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }
  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String p0;
    String p1;
    String p2;
    int p3;

    // ----- test 0 -----
    p0 = "a1";
    p1 = "b3";
    p2 = "c5";
    p3 = 2;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = "b1";
    p1 = "c3";
    p2 = "a3";
    p3 = 3;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = "a1";
    p1 = "a2";
    p2 = "b2";
    p3 = 6;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = "a5";
    p1 = "b7";
    p2 = "e4";
    p3 = 3;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = "h8";
    p1 = "e2";
    p2 = "d2";
    p3 = 6;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
