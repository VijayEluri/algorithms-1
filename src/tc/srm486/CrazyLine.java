package tc.srm486;

import java.util.HashSet;
import java.util.Set;

// Topcoder SRM 486 Div 2 Level 3
// no memoization used, so its a bit slow :(

public class CrazyLine {
	int[] h;
	int[] s;
	
    public int maxCrazyness(int[] heights) {
    	h = heights;
        
        int m = -1;
        for (int i = 0; i < h.length; i++) {
        	int t = solve(i, new HashSet<Integer>(h.length)); 
        	if (t > m)
        		m = t;
        }
        return m;
    }
    
    int solve(int i, Set<Integer> set) {
		set.add(i);
    	
		int m = 0;
    	for (int j = h.length - 1; j >= 0; j--) {
    		if (set.contains(j))
    			continue;
    		
    		int r = solve(j, new HashSet<Integer>(set));
    		if (r + Math.abs(h[i] - h[j]) > m) 
    			m = r + Math.abs(h[i] - h[j]);
    	}

    	return m;
    }

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		CrazyLine obj;
		int answer;
		obj = new CrazyLine();
		long startTime = System.currentTimeMillis();
		answer = obj.maxCrazyness(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new int[]{5,10,25,40,25};
		p1 = 100;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{2,3,5,7,11,13,17,19};
		p1 = 82;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,1,1,1,1,1,501};
		p1 = 1000;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1000,1000,1000,1000,1000,1000,1000,1000,1000};
		p1 = 0;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
