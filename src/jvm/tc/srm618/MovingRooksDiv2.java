package tc.srm618;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;


class Array {
    int[] a;

    public Array(int[] a) {
        this.a = a;
    }

    public Array(Array b) {
        this.a = Arrays.copyOf(b.a, b.a.length);
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Arrays.hashCode(a);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Array other = (Array) obj;
        if (!Arrays.equals(a, other.a)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Array [a=" + Arrays.toString(a) + "]";
    }

    public int len() {
        return a.length;
    }

    public int get(int i) {
        return a[i];
    }

    public void set(int i, int v) {
        a[i] = v;
    }
}


public class MovingRooksDiv2 {
    private Set<Array> cache;
    private Array goal;

    public String move(int[] Y1, int[] Y2) {
        cache = new HashSet<Array>();
        goal = new Array(Y2);

        if (dfs(new Array(Y1))) {
            return "Possible";
        } else {
            return "Impossible";
        }
    }

    private boolean dfs(Array a) {
        if (a.equals(goal)) {
            return true;
        }

        boolean r = false;
        for (final Array n : neighbors(a)) {
            if (cache.add(n)) {
                r = dfs(n);
                if (r) {
                    return true;
                }
            }
        }
        return false;
    }

    private static Collection<Array> neighbors(Array a) {
        final Collection<Array> r = new ArrayList<Array>();

        for (int i = 0; i < a.len(); i++) {
            for (int j = i + 1; j < a.len(); j++) {
                if (a.get(i) > a.get(j)) {
                    final Array next = new Array(a);
                    next.set(i, a.get(j));
                    next.set(j, a.get(i));
                    r.add(next);
                }
            }
        }
        return r;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, String p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}");
        System.out.println("]");
        MovingRooksDiv2 obj;
        String answer;
        obj = new MovingRooksDiv2();
        final long startTime = System.currentTimeMillis();
        answer = obj.move(p0, p1);
        final long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p2 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p2);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;
        String p2;

        // ----- test 0 -----
        p0 = new int[] {0};
        p1 = new int[] {0};
        p2 = "Possible";
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {1, 0};
        p1 = new int[] {0, 1};
        p2 = "Possible";
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {0, 1};
        p1 = new int[] {1, 0};
        p2 = "Impossible";
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {3, 1, 2, 0};
        p1 = new int[] {0, 2, 1, 3};
        p2 = "Possible";
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] {3, 1, 2, 0};
        p1 = new int[] {3, 2, 0, 1};
        p2 = "Impossible";
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
