package tc.srm621;

import java.util.HashSet;
import java.util.Set;

public class PairGame {
    private Set<Pair> pairs;

    public int maxSum(int a, int b, int c, int d) {
        pairs = new HashSet<Pair>();

        solve(a, b);
        final Pair r = solve(c, d);
        if (r != null) {
            return r.x + r.y;
        } else {
            return -1;
        }
    }

    private Pair solve(int x, int y) {
        Pair r = null;
        while (x > 0 && y > 0) {
            r = new Pair(x, y);
            if (!pairs.add(r)) {
                return r;
            }
            if (x - y > 0) {
                x = x - y;
            } else if (y - x > 0) {
                y = y - x;
            } else {
                // x == y
                break;
            }
        }
        return null;
    }



    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, int p4) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
        System.out.println("]");
        PairGame obj;
        int answer;
        obj = new PairGame();
        final long startTime = System.currentTimeMillis();
        answer = obj.maxSum(p0, p1, p2, p3);
        final long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p4);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p4;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int p1;
        int p2;
        int p3;
        int p4;

        // ----- test 0 -----
        p0 = 1;
        p1 = 1000000;
        p2 = 1;
        p3 = 1000000;
        p4 = 1000001;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 15;
        p1 = 4;
        p2 = 10;
        p3 = 7;
        p4 = 7;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 1;
        p1 = 1;
        p2 = 10;
        p3 = 10;
        p4 = -1;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 1000;
        p1 = 1001;
        p2 = 2000;
        p3 = 2001;
        p4 = 1001;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 10944;
        p1 = 17928;
        p2 = 7704;
        p3 = 21888;
        p4 = 144;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = 1;
        p1 = 1;
        p2 = 1;
        p3 = 1;
        p4 = 2;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}


// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!


class Pair {
    public int x, y;

    public Pair(int _x, int _y) {
        x = _x;
        y = _y;
    }

    @Override
    public boolean equals(Object o) {
        if (o instanceof Pair) {
            final Pair p = (Pair) o;
            return x == p.x && y == p.y;
        }
        return false;
    }

    @Override
    public int hashCode() {
        int result = 17;
        result = 31 * result + x;
        result = 31 * result + y;
        return result;
    }

    @Override
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}
