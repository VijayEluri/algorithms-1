package tc.srm498;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Set;

public class NinePuzzle {
  public int getMinimumCost(String init, String goal) {
    Queue<String> q = new LinkedList<String>();
    Set<String> states = new HashSet<String>();
    q.offer(goal);
    states.add(goal);

    while (!q.isEmpty()) {
      String s = q.poll();
      for (String nghbr: neighbors(s)) {
        if (nghbr.equals(init))
          return 0;
        if (!states.contains(nghbr)) {
          q.offer(nghbr);
          states.add(nghbr);
        }
      }
    }

    int min = Integer.MAX_VALUE;
    for (String s: states) {
      int cst = cost(init, s);
      if (cst < min)
        min = cst;
    }
    return min;
  }

  private int cost(String a, String b) {
    return
      (Math.abs(count(a, 'R') - count(b, 'R')) +
       Math.abs(count(a, 'G') - count(b, 'G')) +
       Math.abs(count(a, 'B') - count(b, 'B')) +
       Math.abs(count(a, 'Y') - count(b, 'Y')))/2;
  }
  
  private int count(String r, char c) {
    int cnt = 0;
    for (int i = 0; i < r.length(); i++)
      if (r.charAt(i) == c)
        cnt += 1;
    return cnt;
  }

  private List<String> neighbors(String s) {
    List<String> nghbrs = new ArrayList<String>();

    switch (s.indexOf('*')) {
    case 0:
      nghbrs.add(swap(s, 1, 0));
      nghbrs.add(swap(s, 2, 0));
      break;
    case 1:
      nghbrs.add(swap(s, 0, 1));
      nghbrs.add(swap(s, 2, 1));
      nghbrs.add(swap(s, 3, 1));
      nghbrs.add(swap(s, 4, 1));
      break;
    case 2:
      nghbrs.add(swap(s, 0, 2));
      nghbrs.add(swap(s, 1, 2));
      nghbrs.add(swap(s, 4, 2));
      nghbrs.add(swap(s, 5, 2));
      break;
    case 3:
      nghbrs.add(swap(s, 1, 3));
      nghbrs.add(swap(s, 4, 3));
      nghbrs.add(swap(s, 6, 3));
      nghbrs.add(swap(s, 7, 3));
      break;
    case 4:
      nghbrs.add(swap(s, 1, 4));
      nghbrs.add(swap(s, 2, 4));
      nghbrs.add(swap(s, 3, 4));
      nghbrs.add(swap(s, 5, 4));
      nghbrs.add(swap(s, 7, 4));
      nghbrs.add(swap(s, 8, 4));
      break;
    case 5:
      nghbrs.add(swap(s, 2, 5));
      nghbrs.add(swap(s, 4, 5));
      nghbrs.add(swap(s, 8, 5));
      nghbrs.add(swap(s, 9, 5));
      break;
    case 6:
      nghbrs.add(swap(s, 3, 6));
      nghbrs.add(swap(s, 7, 6));
      break;
    case 7:
      nghbrs.add(swap(s, 3, 7));
      nghbrs.add(swap(s, 4, 7));
      nghbrs.add(swap(s, 6, 7));
      nghbrs.add(swap(s, 8, 7));
      break;
    case 8:
      nghbrs.add(swap(s, 4, 8));
      nghbrs.add(swap(s, 5, 8));
      nghbrs.add(swap(s, 7, 8));
      nghbrs.add(swap(s, 9, 8));
      break;
    case 9:
      nghbrs.add(swap(s, 5, 9));
      nghbrs.add(swap(s, 8, 9));
      break;
    }
    return nghbrs;
  }

  private String swap(String s, int i, int j) {
    if (i > j)
      return swap(s, j, i);
    else {
      char[] sa = s.toCharArray();
      char t = sa[i];
      sa[i] = sa[j];
      sa[j] = t;
      return String.valueOf(sa);
    }
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, boolean hasAnswer, int p2) {
    System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"");
    System.out.println("]");
    NinePuzzle obj;
    int answer;
    obj = new NinePuzzle();
    long startTime = System.currentTimeMillis();
    answer = obj.getMinimumCost(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p2);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p2;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }
  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String p0;
    String p1;
    int p2;

    // ----- test 0 -----
    p0 = "BG*YRGRRYR";
    p1 = "BGGY*YRRRR";
    p2 = 0;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = "GBBB*BGBBG";
    p1 = "RYYY*YRYYR";
    p2 = 9;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = "RRBR*BRBBB";
    p1 = "BBRB*RBRRR";
    p2 = 1;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
