import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;

public class ActivateGame {
  private String[] grid;
  private int M;
  private int N;

  class Vertex {
    int key;
    int i, j;

    public Vertex(int key, int i, int j) {
      this.key = key;
      this.i = i;
      this.j = j;
    }

    @Override
    public boolean equals(Object obj) {
      final Vertex v = (Vertex) obj;
      return v.i == i && v.j == j;
    }

    @Override
    public int hashCode() {
      int result = 31;
      result = 17 * result + i;
      result = 17 * result + j;
      return result;
    }
  }

  public int findMaxScore(String[] grid) {
    this.grid = grid;
    N = grid.length;
    M = grid[0].length();

    return MSTPrims();
  }

  private int MSTPrims() {
    final Queue<Vertex> queue = new PriorityQueue<Vertex>(100, new Comparator<Vertex>() {
      @Override
      public int compare(Vertex o1, Vertex o2) {
        return o2.key - o1.key;
      }
    });

    for (int i = 0; i < N; i++)
      for (int j = 0; j < M; j++)
        if (i == 0 && j == 0)
          queue.add(new Vertex(0, i, j));
        else
          queue.add(new Vertex(-1, i, j));

    int sum = 0;
    while (!queue.isEmpty()) {
      final Vertex u = queue.poll();
      for (Vertex v : neighbors(u))
        if (contains(queue, v)) {
          v = getFromQueue(queue, v);
          if (w(u, v) > v.key) {
            v.key = w(u, v);
            updateQueue(queue, v);
          }
        }
      sum += u.key;
    }

    return sum;
  }

  private Vertex getFromQueue(Queue<Vertex> queue, Vertex v) {
    for (final Iterator<Vertex> i = queue.iterator(); i.hasNext();) {
      final Vertex u = i.next();
      if (v.equals(u))
        return u;
    }
    return null;
  }

  private void updateQueue(Queue<Vertex> queue, Vertex v) {
    removeFromQueue(queue, v);
    queue.offer(v);
  }

  private void removeFromQueue(Queue<Vertex> queue, Vertex u) {
    for (final Iterator<Vertex> i = queue.iterator(); i.hasNext();) {
      final Vertex v = i.next();
      if (v.equals(u)) {
        queue.remove(v);
        break;
      }
    }
  }

  private int w(Vertex u, Vertex v) {
    return Math.abs(value(grid[u.i].charAt(u.j)) - value(grid[v.i].charAt(v.j)));
  }

  private int value(char c) {
    if (c >= '0' && c <= '9')
      return c - '0';
    if (c >= 'a' && c <= 'z')
      return c - 'a' + 10;
    if (c >= 'A' && c <= 'Z')
      return c - 'A' + 36;

    return 0;
  }

  private boolean contains(Queue<Vertex> queue, Vertex v) {
    for (final Iterator<Vertex> i = queue.iterator(); i.hasNext();)
      if (v.equals(i.next()))
        return true;
    return false;
  }

  private List<Vertex> neighbors(Vertex u) {
    final List<Vertex> neighbors = new ArrayList<Vertex>();
    final int i = u.i, j = u.j;
    if (withinBounds(i, j - 1))
      neighbors.add(new Vertex(-1, i, j - 1));
    if (withinBounds(i, j + 1))
      neighbors.add(new Vertex(-1, i, j + 1));
    if (withinBounds(i - 1, j))
      neighbors.add(new Vertex(-1, i - 1, j));
    if (withinBounds(i + 1, j))
      neighbors.add(new Vertex(-1, i + 1, j));
    return neighbors;
  }

  private boolean withinBounds(int i, int j) {
    return i >= 0 && i <= N && j >= 0 && j <= M;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + p0[i] + "\"");
    }
    System.out.print("}");
    System.out.println("]");
    ActivateGame obj;
    int answer;
    obj = new ActivateGame();
    final long startTime = System.currentTimeMillis();
    answer = obj.findMaxScore(p0);
    final long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p1);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p1;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String[] p0;
    int p1;

    // ----- test 0 -----
    p0 = new String[] { "05", "aB" };
    p1 = 69;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new String[] { "03", "21" };
    p1 = 7;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new String[] { "John", "Brus", "Gogo" };
    p1 = 118;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new String[] { "AAA", "AAA", "AAA" };
    p1 = 0;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
