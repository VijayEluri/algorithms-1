package tc.srm297;

import java.util.Arrays;


public class RandomizedQuickSort {
  double[] cache;
  int s, a, b;

  public double getExpectedTime(int listSize, int _S, int _a, int _b) {
    s = _S;
    a = _a;
    b = _b;
    cache = new double[listSize + 1];
    Arrays.fill(cache, -1);
    return solve(0, listSize - 1);
  }

  private double solve(int i, int j) {
    int len = j - i + 1;
    if (len <= 0) {
      return 0;
    }
    if (len <= s) {
      return b * len * len;
    }
    if (Double.compare(cache[len], -1D) != 0) {
      return cache[len];
    }

    double t = 0D;
    for (int k = i; k <= j; k++) {
      t += solve(i, k - 1) + solve(k + 1, j);
    }
    t /= len;
    t += a * len;

    cache[len] = t;
    return t;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, double p4) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
    System.out.println("]");
    RandomizedQuickSort obj;
    double answer;
    obj = new RandomizedQuickSort();
    long startTime = System.currentTimeMillis();
    answer = obj.getExpectedTime(p0, p1, p2, p3);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p4);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = Math.abs(p4 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p4));
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;
    int p2;
    int p3;
    double p4;

    // ----- test 0 -----
    p0 = 1000;
    p1 = 1;
    p2 = 1;
    p3 = 1;
    p4 = 11985.912662821796;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 2;
    p1 = 1;
    p2 = 1;
    p3 = 1;
    p4 = 3.0D;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 3;
    p1 = 1;
    p2 = 1;
    p3 = 1;
    p4 = 5.666666666666667D;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 3;
    p1 = 1;
    p2 = 1;
    p3 = 10;
    p4 = 17.666666666666668D;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 10;
    p1 = 5;
    p2 = 3;
    p3 = 2;
    p4 = 112.37380952380951D;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
