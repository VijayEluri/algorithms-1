package tc.misc;

import java.util.Comparator;
import java.util.PriorityQueue;


public class CatchTheBeatEasy {
  public String ableToCatchAll(int[] x, int[] y) {
    final PriorityQueue<Pair> q = new PriorityQueue<Pair>(x.length, new Comparator<Pair>() {
      @Override
      public int compare(Pair o1, Pair o2) {
        return o1.y - o2.y;
      }
    });

    for (int i = 0; i < x.length; i++) {
      q.offer(new Pair(x[i], y[i]));
    }

    int pos = 0;
    int totalDistanceDropped = 0;
    while (!q.isEmpty()) {
      final Pair p = q.poll();
      p.y -= totalDistanceDropped;
      if (!canReach(pos, p)) {
        return "Not able to catch";
      }
      pos = p.x;
      totalDistanceDropped += p.y;
    }
    return "Able to catch";
  }

  private static boolean canReach(int pos, Pair p) {
    if (pos > p.x) {
      return pos - p.y <= p.x;
    } else if (pos < p.x) {
      return pos + p.y >= p.x;
    } else {
      return true;
    }
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, String p2) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p1.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p1[i]);
    }
    System.out.print("}");
    System.out.println("]");
    CatchTheBeatEasy obj;
    String answer;
    obj = new CatchTheBeatEasy();
    final long startTime = System.currentTimeMillis();
    answer = obj.ableToCatchAll(p0, p1);
    final long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + "\"" + p2 + "\"");
    }
    System.out.println("Your answer:");
    System.out.println("\t" + "\"" + answer + "\"");
    if (hasAnswer) {
      res = answer.equals(p2);
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    int[] p1;
    String p2;

    // ----- test 0 -----
    p0 = new int[]{-1, 1, 0};
    p1 = new int[]{1, 3, 4};
    p2 = "Able to catch";
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[]{-3};
    p1 = new int[]{2};
    p2 = "Not able to catch";
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[]{-1, 1, 0};
    p1 = new int[]{1, 2, 4};
    p2 = "Not able to catch";
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new int[]{0, -1, 1};
    p1 = new int[]{9, 1, 3};
    p2 = "Able to catch";
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = new int[]{70, -108, 52, -70, 84, -29, 66, -33};
    p1 = new int[]{141, 299, 402, 280, 28, 363, 427, 232};
    p2 = "Not able to catch";
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = new int[]{-175, -28, -207, -29, -43, -183, -175, -112, -183, -31, -25, -66, -114, -116, -66};
    p1 = new int[]{320, 107, 379, 72, 126, 445, 318, 255, 445, 62, 52, 184, 247, 245, 185};
    p2 = "Able to catch";
    all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 6 -----
    p0 = new int[]{0, 0, 0, 0};
    p1 = new int[]{0, 0, 0, 0};
    p2 = "Able to catch";
    all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

class Pair {
  public int x, y;

  public Pair(int _x, int _y) {
    x = _x;
    y = _y;
  }

  @Override
  public boolean equals(Object o) {
    if (o instanceof Pair) {
      Pair p = (Pair) o;
      return x == p.x && y == p.y;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + x;
    result = 31 * result + y;
    return result;
  }

  @Override
  public String toString() {
    return "(" + x + "," + y + ")";
  }
}
