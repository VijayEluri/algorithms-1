package tc.srm501;

public class FoxProgression {
  static final int INFINITE = Integer.MAX_VALUE;
  static final int NONE = Integer.MIN_VALUE;

  public int theCount(int[] seq) {
    int i1 = AP(seq);
    int i2 = GP(seq);
    if (i1 == NONE && i2 == NONE) {
      return 0;
    }
    if (i1 == INFINITE || i2 == INFINITE) {
      return -1;
    }
    if (i1 == NONE || i2 == NONE) {
      return 1;
    }
    if (i1 == i2) {
      return 1;
    }
    return 2;
  }

  private int GP(int[] seq) {
    if (seq.length == 1) {
      return INFINITE;
    }
    if (seq[1] % seq[0] != 0) {
      return NONE;
    }
    int r = seq[1] / seq[0];
    for (int i = 1; i < seq.length; i++) {
      if (seq[i] % seq[i - 1] != 0 || seq[i] / seq[i - 1] != r) {
        return NONE;
      }
    }
    return seq[seq.length - 1] * r;
  }

  private int AP(int[] seq) {
    if (seq.length == 1) {
      return INFINITE;
    }
    int d = seq[1] - seq[0];
    for (int i = 1; i < seq.length; i++) {
      if (seq[i] - seq[i - 1] != d) {
        return NONE;
      }
    }
    return seq[seq.length - 1] + d;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}");
    System.out.println("]");
    FoxProgression obj;
    int answer;
    obj = new FoxProgression();
    long startTime = System.currentTimeMillis();
    answer = obj.theCount(p0);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p1);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p1;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    int p1;

    // ----- test 0 -----
    p0 = new int[]{1, 2, 4, 10};
    p1 = 0;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[]{5, 3, 1};
    p1 = 1;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[]{1, 1};
    p1 = 1;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new int[]{8, 4};
    p1 = 1;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = new int[]{1};
    p1 = -1;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = new int[]{4, 8};
    p1 = 2;
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------

    // ----- test 6 -----
    p0 = new int[]{1, 3, 4};
    p1 = 0;
    all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
