package tc.srm505;

public class PerfectSequences {
  final int mMax = (int) Math.pow(10, 9);

  public String fixIt(int[] seq) {
    if (seq.length == 1) {
      return "Yes";
    }

    for (int i = 0; i < seq.length; i++) {
      if (isPerfectOnChanging(i, seq)) {
        return "Yes";
      }
    }
    return "No";
  }

  private boolean isPerfectOnChanging(int i, int[] seq) {
    final int sum = sumExcept(i, seq);
    final int product = productExceptButNotGreaterThan(i, seq, sum);

    if (product < 0) {
      return false;
    }

    if (product == 0 || product == 1) {
      if (sum == 0 && seq[i] != 0) {
        return true;
      } else {
        return false;
      }
    }

    if (sum % (product - 1) == 0 && sum / (product - 1) != seq[i]) {
      return true;
    }

    return false;
  }

  private int productExceptButNotGreaterThan(int index, int[] seq, int sum) {
    int productSoFar = 1;
    for (int i = 0; i < seq.length; i++) {
      if (i != index) {
        if (productSoFar > sum + mMax) {
          return -1;
        } else {
          productSoFar *= seq[i];
        }
      }
    }

    return productSoFar;
  }

  private int sumExcept(int index, int[] seq) {
    int sum = 0;
    for (int i = 0; i < seq.length; i++) {
      if (i != index) {
        sum += seq[i];
      }
    }
    return sum;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String p1) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}");
    System.out.println("]");
    PerfectSequences obj;
    String answer;
    obj = new PerfectSequences();
    long startTime = System.currentTimeMillis();
    answer = obj.fixIt(p0);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + "\"" + p1 + "\"");
    }
    System.out.println("Your answer:");
    System.out.println("\t" + "\"" + answer + "\"");
    if (hasAnswer) {
      res = answer.equals(p1);
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    String p1;

    // ----- test 0 -----
    p0 = new int[]{1, 3, 4};
    p1 = "Yes";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[]{1, 2, 3};
    p1 = "No";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[]{1, 4, 2, 4, 2, 4};
    p1 = "No";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new int[]{1000000, 1, 1, 1, 1, 2};
    p1 = "Yes";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = new int[]{8};
    p1 = "Yes";
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = new int[]{2, 0, 2};
    p1 = "No";
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
