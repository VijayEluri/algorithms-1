package topcoder.srm625;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;


public class PalindromePermutations {
  public double palindromeProbability(String word) {
    Map<Character, Integer> cm = new HashMap<Character, Integer>();
    for (char c : word.toCharArray()) {
      if (cm.containsKey(c)) {
        cm.put(c, cm.get(c) + 1);
      } else {
        cm.put(c, 1);
      }
    }

    BigInteger total = f(sum(cm.values()));
    for (int v : cm.values()) {
      total = total.divide(f(v));
    }

    boolean oddFound = false;
    for (Entry<Character, Integer> e : cm.entrySet()) {
      int v = e.getValue();
      if (v % 2 != 0) {
        if (oddFound) {
          return 0.0;
        } else {
          oddFound = true;
          v = (v - 1) / 2;
        }
      } else {
        v = v / 2;
      }
      cm.put(e.getKey(), v);
    }

    BigInteger totalA = f(sum(cm.values()));
    for (int v : cm.values()) {
      totalA = totalA.divide(f(v));
    }

    return new BigDecimal(totalA).divide(new BigDecimal(total), MathContext.DECIMAL128).doubleValue();
  }

  private BigInteger f(int n) {
    BigInteger f = BigInteger.valueOf(1);
    for (int i = 1; i <= n; i++) {
      f = f.multiply(BigInteger.valueOf(i));
    }
    return f;
  }

  private int sum(Collection<Integer> values) {
    int sum = 0;
    for (Integer v : values) {
      sum += v;
    }
    return sum;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, double p1) {
    System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
    System.out.println("]");
    PalindromePermutations obj;
    double answer;
    obj = new PalindromePermutations();
    long startTime = System.currentTimeMillis();
    answer = obj.palindromeProbability(p0);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p1);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = Math.abs(p1 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p1));
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String p0;
    double p1;

    // ----- test 0 -----
    p0 = "haha";
    p1 = 0.3333333333333333D;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = "xxxxy";
    p1 = 0.2D;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = "xxxx";
    p1 = 1.0D;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = "abcde";
    p1 = 0.0D;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhff";
    p1 = 0.025641025641025637D;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
