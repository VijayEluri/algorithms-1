package topcoder.misc.dp;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// srm 295, div 2, level 3
// TODO: the code's incorrect, doesn't work for 1 of the test cases

public class JimmyLightning {
  static class Diamond {
    int value, time, room;

    Diamond(int _value, int _time, int _room) {
      value = _value;
      room = _room;
      time = _time;
    }

    static Diamond valueOf(String s) {
      String[] vs = s.split(" +");
      return new Diamond(Integer.valueOf(vs[0]), Integer.valueOf(vs[1]), Integer.valueOf(vs[2]) - 1);
    }

    public String toString() {
      return "(" + value + " " + time + " " + room + ")";
    }
  }

  Map<Integer, List<Diamond>> roomDiamondsMap = new HashMap<Integer, List<Diamond>>();
  Map<String, Integer> cache = new HashMap<String, Integer>();
  int[] doors;

  public int robTheBank(int[] _doors, String[] _diamonds) {
    if (_diamonds.length == 0) {
      return 0;
    }

    for (String s : _diamonds) {
      Diamond d = Diamond.valueOf(s);
      List<Diamond> diamonds = roomDiamondsMap.get(d.room);
      if (diamonds == null) {
        diamonds = new ArrayList<Diamond>();
      }
      diamonds.add(d);
      roomDiamondsMap.put(d.room, diamonds);
    }

    doors = _doors;
    return solve(0, doors[0]);
  }

  private int solve(int i, int time) {
    if (i == doors.length) {
      return 0;
    }

    String key = String.valueOf(i) + time;
    if (cache.containsKey(key)) {
      return cache.get(key);
    }

    int[] values = bestValues(time - 1, roomDiamondsMap.get(i));
    int max = 0;
    for (int j = 0; j < time; j++) {
      int tmp = values[j] + solve(i + 1, Math.min(time - j, i == doors.length - 1 ? 0 : doors[i + 1]));
      if (tmp > max) {
        max = tmp;
      }
    }

    cache.put(key, max);
    return max;
  }

  private int[] bestValues(int time, List<Diamond> diamonds) {
    int[] values = new int[time + 1];
    if (diamonds == null) {
      return values;
    }

    int[][] s = new int[time + 1][diamonds.size() + 1];
    for (int i = 1; i <= time; i++) {
      for (int j = 1; j <= diamonds.size(); j++) {
        Diamond d = diamonds.get(j - 1);
        if (d.time > i) {
          s[i][j] = s[i][j - 1];
        } else {
          s[i][j] = Math.max(s[i][j - 1], s[i - d.time][j] + d.value);
        }
      }
    }

    for (int i = 0; i <= time; i++) {
      values[i] = s[i][diamonds.size()];
    }

    return values;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int[] p0, String[] p1, boolean hasAnswer, int p2) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p1.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + p1[i] + "\"");
    }
    System.out.print("}");
    System.out.println("]");
    JimmyLightning obj;
    int answer;
    obj = new JimmyLightning();
    long startTime = System.currentTimeMillis();
    answer = obj.robTheBank(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p2);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p2;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    String[] p1;
    int p2;

    // ----- test 0 -----
    p0 =
        new int[]{473, 775, 489, 393, 573, 197, 752, 327, 169, 699, 773, 726, 572, 919, 557, 235, 655, 808, 192, 272, 835, 685, 914, 784, 484, 722, 434, 738, 64, 167, 957, 614, 558, 457, 891, 488, 426, 956, 294, 572, 688, 60, 440, 705, 910, 357, 859, 713, 263, 338};
    p1 =
        new String[]{"169 300 23", "88 822 22", "568 218 18", "725 531 7", "679 764 30", "512 564 36", "427 707 22", "68 452 14", "247 414 17", "367 985 30", "827 3 22", "48 729 14", "715 15 32", "319 859 9", "878 783 31", "367 719 1", "395 139 8", "154 505 18", "366 504 7", "660 719 4", "822 222 4", "976 882 37", "185 159 38", "115 175 35", "661 987 50", "755 577 40", "163 271 19", "968 438 12", "693 784 29", "711 50 8", "222 888 42", "199 375 30", "865 310 47", "995 818 15", "340 774 36", "432 518 32", "454 853 46", "719 427 44", "973 591 12", "888 879 11", "17 579 20", "33 172 45", "250 466 19", "570 476 32", "78 505 49", "733 313 16", "333 863 46", "301 956 31", "438 844 26", "759 487 27"};
    p2 = 13;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[]{1};
    p1 = new String[]{"999 1 1"};
    p2 = 0;
    //  all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[]{10, 5, 2};
    p1 = new String[]{"1 1 1", "2 1 2", "3 1 3"};
    p2 = 14;
    //  all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
