package topcoder.srm495;

//TODO: Broken Code

public class ColorfulCards {
  int n;
  int[] cards;
  boolean[] prime;

  public int[] theCards(int N, String colors) {
    n = N;
    cards = new int[colors.length()];
    prime = fillPrimes();
    makeSequence(1, 0, colors);
    return cards;
  }

  private boolean[] fillPrimes() {
    int[] primeNos =
        new int[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};

    boolean prime[] = new boolean[n + 1];
    for (int i : primeNos) {
      if (i > n) {
        break;
      }
      prime[i] = true;
    }
    return prime;
  }

  private boolean makeSequence(int i, int j, String colors) {
    int len = colors.length();
    if (len == 0) {
      return true;
    }

    int cnt = 0, card = -1;
    for (; i <= n - len; i++) {
      cards[j] = getNumber(colors.charAt(0), i);
      if (cards[j] == 0) {
        return false;
      }
      if (makeSequence(cards[j] + 1, j + 1, colors.substring(1))) {
        cnt += 1;
        card = cards[j];
      } else {
        break;
      }

      if (cnt > 1) {
        cards[j] = -1;
        return true;
      }
    }

    cards[j] = card;
    if (cnt == 1) {
      return true;
    }
    return false;
  }

  private int getNumber(char c, int i) {
    if (c == 'R') {
      for (; i < n; i++) {
        if (prime[i]) {
          return i;
        }
      }
      return 0;
    } else {
      for (; i < n; i++) {
        if (!prime[i]) {
          return i;
        }
      }
      return 0;
    }
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int p0, String p1, boolean hasAnswer, int[] p2) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + "\"" + p1 + "\"");
    System.out.println("]");
    ColorfulCards obj;
    int[] answer;
    obj = new ColorfulCards();
    long startTime = System.currentTimeMillis();
    answer = obj.theCards(p0, p1);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.print("\t" + "{");
      for (int i = 0; p2.length > i; ++i) {
        if (i > 0) {
          System.out.print(",");
        }
        System.out.print(p2[i]);
      }
      System.out.println("}");
    }
    System.out.println("Your answer:");
    System.out.print("\t" + "{");
    for (int i = 0; answer.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(answer[i]);
    }
    System.out.println("}");
    if (hasAnswer) {
      if (answer.length != p2.length) {
        res = false;
      } else {
        for (int i = 0; answer.length > i; ++i) {
          if (answer[i] != p2[i]) {
            res = false;
          }
        }
      }
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    String p1;
    int[] p2;

    // ----- test 0 -----
    p0 = 5;
    p1 = "RRR";
    p2 = new int[]{2, 3, 5};
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 7;
    p1 = "BBB";
    p2 = new int[]{1, 4, 6};
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 6;
    p1 = "RBR";
    p2 = new int[]{-1, 4, 5};
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 58;
    p1 = "RBRRBRBBRBRRBBRRBBBRRBBBRR";
    p2 =
        new int[]{-1, -1, -1, -1, -1, -1, -1, -1, 17, 18, 19, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 53};
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 495;
    p1 = "RBRRBRBBRBRRBBRRBBBRRBBBRR";
    p2 =
        new int[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
