package topcoder.srm618;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;


public class LongWordsDiv2 {
  public static String find(String word) {
    final Map<Character, List<Integer>> m = new HashMap<Character, List<Integer>>();

    for (int i = 0; i < word.length(); i++) {
      if (!Character.isUpperCase(word.charAt(0))) {
        return "Dislikes";
      }
      if (i < word.length() - 1) {
        if (word.charAt(i) == word.charAt(i + 1)) {
          return "Dislikes";
        }
      }

      final char c = word.charAt(i);
      if (m.containsKey(c)) {
        m.get(c).add(i);
      } else {
        final List<Integer> l = new ArrayList<Integer>();
        l.add(i);
        m.put(c, l);
      }
    }

    for (final Entry<Character, List<Integer>> e : m.entrySet()) {
      e.getKey();
      final List<Integer> v = e.getValue();
      if (v.size() == 1) {
        continue;
      }

      if (v.size() >= 4) {
        return "Dislikes";
      }

      for (int i = 0; i < v.size(); i++) {
        for (int j = i + 1; j < v.size(); j++) {
          if (foundPattern(m, v.get(i), v.get(j))) {
            return "Dislikes";
          }
        }
      }
    }
    return "Likes";
  }

  private static boolean foundPattern(Map<Character, List<Integer>> m, int a, int b) {
    for (final Entry<Character, List<Integer>> e : m.entrySet()) {
      e.getKey();
      final List<Integer> v = e.getValue();

      if (v.size() >= 2) {
        for (int i = 0; i < v.size(); i++) {
          for (int j = i + 1; j < v.size(); j++) {
            final int a1 = v.get(i);
            final int b1 = v.get(j);

            if (a < a1 && b > a1 && b < b1) {
              return true;
            }
          }
        }
      }
    }
    return false;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
    System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
    System.out.println("]");
    LongWordsDiv2 obj;
    String answer;
    obj = new LongWordsDiv2();
    final long startTime = System.currentTimeMillis();
    answer = LongWordsDiv2.find(p0);
    final long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + "\"" + p1 + "\"");
    }
    System.out.println("Your answer:");
    System.out.println("\t" + "\"" + answer + "\"");
    if (hasAnswer) {
      res = answer.equals(p1);
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String p0;
    String p1;

    // ----- test 0 -----
    p0 = "AAA";
    p1 = "Dislikes";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = "ABCBA";
    p1 = "Likes";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = "ABCBAC";
    p1 = "Dislikes";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = "TOPCODER";
    p1 = "Likes";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = "VAMOSGIMNASIA";
    p1 = "Dislikes";
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = "SINGLEROUNDMATCH";
    p1 = "Likes";
    all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
    // ------------------

    // ----- test 6 -----
    p0 = "DALELOBO";
    p1 = "Likes";
    all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
