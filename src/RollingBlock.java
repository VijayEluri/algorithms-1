import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class RollingBlock {
  int rows;
  int cols;
  int[] target;

  Map<String, Integer> cache = new HashMap<String, Integer>();
  Set<String> underProcess = new HashSet<String>();

  enum Position {STANDING, HORIZONTAL, VERTICAL};
  int[][] fromVerticalMov   = {{0, -1}, {0, 1}, {-2, 0}, {2, 0}};
  Position[] fromVerticalPos = {Position.VERTICAL, Position.VERTICAL, Position.STANDING, Position.STANDING};

  int[][] fromHorizontalMov = {{-1, 0}, {1, 0}, {0, -2}, {0, 2}};
  Position[] fromHorizontalPos = {Position.HORIZONTAL, Position.HORIZONTAL, Position.STANDING, Position.STANDING};

  int[][] fromStandingMov   = {{-2, 0}, {2, 0}, {0, -2}, {0, 2}};
  Position[] fromStandingPos = {Position.VERTICAL, Position.VERTICAL, Position.HORIZONTAL, Position.HORIZONTAL};

  public int minMoves(int rows, int cols, int[] start, int[] target) {
    this.rows   = rows;
    this.cols   = cols;

    this.target = target;
    cache.put(Position.STANDING + Arrays.toString(target), 0);
    return solve(Position.STANDING , start);
  }

  private int solve(Position pos, int[] start) {
    String key = pos + Arrays.toString(start);

    if (!valid(pos, start))
      return -1;

    if (cache.containsKey(key))
      return cache.get(key);

    underProcess.add(key);
    
    int ans = -1;
    switch(pos) {
    case VERTICAL:
      ans = doIt(pos, fromVerticalPos, start, fromVerticalMov);
      break;
    case HORIZONTAL:
      ans = doIt(pos, fromHorizontalPos, start, fromHorizontalMov);
      break;
    case STANDING:
      ans = doIt(pos, fromStandingPos, start, fromStandingMov);
    }
    
    underProcess.remove(key);
    cache.put(key, ans);
    return ans;
  }

  private int doIt(Position pos, Position[] nextPos, int[] start, int[][] movement) {
    int min = Integer.MAX_VALUE;
    boolean f = false;
    for (int i = 0; i < movement.length; i++) {
      int[] m = new int[]{start[0] + movement[i][0], start[1] + movement[i][1]};

      if (!underProcess.contains(nextPos[i] + Arrays.toString(m))) {
        f = true;
        int _min = solve(nextPos[i], m);
        if (_min != -1 && _min + 1 < min)
          min = _min + 1;
      }
    }

    if (f == false)
      System.out.println("FDFVDF");
    if (min == Integer.MAX_VALUE)
      return -1;
    return min;
  }

  private boolean valid(Position pos, int[] start) {
    int i = start[0], j = start[1];
    switch (pos) {
    case VERTICAL:
      if (i - 1 < 0 || i + 1 >= rows || j < 0 || j >= cols)
        return false;
      break;
    case HORIZONTAL:
      if (j - 1 < 0 || j + 1 >= cols || i < 0 || i >= rows)
        return false;
      break;
    case STANDING:
      if (i < 0 || i >= rows || j < 0 || j >= cols)
        return false;
    }
    return true;
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int[] p2, int[] p3, boolean hasAnswer, int p4) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + "{");
    for (int i = 0; p2.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p2[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p3.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p3[i]);
    }
    System.out.print("}");
    System.out.println("]");
    RollingBlock obj;
    int answer;
    obj = new RollingBlock();
    long startTime = System.currentTimeMillis();
    answer = obj.minMoves(p0, p1, p2, p3);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p4);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p4;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }
  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int p1;
    int[] p2;
    int[] p3;
    int p4;

    // ----- test 0 -----
    p0 = 4;
    p1 = 5;
    p2 = new int[]{3,0};
    p3 = new int[]{2,4};
    p4 = 3;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 5;
    p1 = 5;
    p2 = new int[]{2,2};
    p3 = new int[]{4,0};
    p4 = -1;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 4;
    p1 = 4;
    p2 = new int[]{3,0};
    p3 = new int[]{3,3};
    p4 = 5;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 4;
    p1 = 4;
    p2 = new int[]{3,0};
    p3 = new int[]{0,3};
    p4 = 10;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 100;
    p1 = 100;
    p2 = new int[]{4,5};
    p3 = new int[]{5,97};
    p4 = 47;
    // all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = 20;
    p1 = 20;
    p2 = new int[]{7,9};
    p3 = new int[]{7,9};
    p4 = 0;
    all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------
    
    // ----- test 5 -----
    p0 = 8;
    p1 = 8;
    p2 = new int[]{4, 4};
    p3 = new int[]{7, 7};
    p4 = 0;
    all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
